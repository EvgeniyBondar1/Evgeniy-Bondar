using Cinema.DataAccess.DbPatterns.Interfaces;
using Microsoft.EntityFrameworkCore;
using System.Data.Entity;

namespace Cinema.DataAccess.DbPatterns
{
    #region GenericRepository
    /*GenericRepository - это паттерн проектирования, который позволяет создавать универсальные методы доступа к данным для любой сущности в базе данных.
     * Таким образом, вместо того чтобы писать отдельные методы доступа для каждой сущности, мы можем использовать один и тот же набор методов для любой сущности.
     * что повышает повторное использование кода и сокращает количество дублирующего кода.
     * Обычно UnitOfWork и GenericRepository используются вместе для управления доступов к данным приложения. В рамках этого паттерна,
     * UnitOfWork является основной точкой взаимодействия с Базой данных, a GenericRepository обеспецивает унивирсальный интерфейс доступа к данным.
     * В целом использование этих паттернов позволяет создавать более чистый и модульный код, который легче поддерживать и тестировать.
     * Однако стоит заметить, что эти паттерны не всегда подходят для всех приложений и в некоторых случаях могут привести к излишней
     * 
     * Плюсы UnitOfWork:
     * 
     * - Обеспечивает единообразный и целостный подход к управлению транзакциями базы данных в рамках приложения.
     * - Упрощает тестирование и поддержку кода, позволяя изолироват ьлогику достпуа к данным от контроллеров.
     * - Уменьшает количество повторяющегося кода и способствует повторному использованию кода.
     * 
     * Минусы UnitOfWork:
     * 
     *  - В некоторых случаях может приводить к излишней сложности и усложнения структуры приложения.
     *  - Может оазаться избыточным для простых проектов, которые не требуют управления транзакциями.
     * 
     * Плюсы GenericRepository:
     * 
     *  - Обеспечивает единообразный и универсальный интерфейс достпуа к данным для любой сущности в базе данных.
     *  - Уменьшает количество дублирующего кода и способствует повторному использованию кода.
     *  - Упрощает тестиовани еи поддержку кода.
     * 
     * Минусы GenericRepository:
     *  - Не всегда может обеспечить оптимальную производительность, так как предоставляет универсальный интерфейс доступа к данным для 
     *    всех сущностей в базе данных.
     *  - Некоторые разработчики могут считать, что GenericRepository слишком обобщен и неудобен в использовании.
     *  - В целом использование GenericRepository и UnitOfWork может значительно упростить разработку приложения и повысить модульность.
     * */
    #endregion

    //Реализация паттерна IGenericRepository
    public class GenericRepository<T> : IGenericRepository<T> where T : class
    {
        //Обращение к базе данных
        private readonly MyDbContext _context;

        public GenericRepository(MyDbContext context)
        {
            _context = context;
        }
        //Реализация метода - Создание записи в БД
        public async Task<T> Create(T t)
        {
            //.Set<T>() является методом объекта DbContext, который возвращает объект DbSet<T>, представляющий набор сущностей T в базе данных.
            _context.Set<T>().Add(t);
            //DbSet<T> предоставляет функциональность для выполнения операций CRUD (создание, чтение, обновление, удаление) над сущностями T в базе данных.
            //Каждый объект DbSet<T> отображает таблицу базы данных, которая соответствует типу T. Это означает, что при выполнении операций
            //CRUD с помощью DbSet<T> будут происходить соответствующие изменения в соответствующей таблице базы данных.
            await _context.SaveChangesAsync();
            return t;
        }
        //Реализация метода - Удаление записи в БД
        public async Task Delete(T t)
        {
            _context.Set<T>().Remove(t);
            await _context.SaveChangesAsync();
        }
        //Реализация метода - Получение записи по Id из БД
        public async Task<T> Get(Guid id)
        {
           return await _context.Set<T>().FindAsync(id);
        }
        //Реализация метода - Получение записей из БД
        public async Task<IList<T>> GetAll()
        {
            return await _context.Set<T>().ToListAsync();
        }
        //Реализация метода - Обновить запись таблицы в БД
        public async Task Update(T t)
        {
            _context.Set<T>().Update(t);
            await _context.SaveChangesAsync();
        }
    }
}
